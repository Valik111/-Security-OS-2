#include <iostream>
#include <winsock2.h>
#include <time.h>
#pragma comment(lib, "wsock32.lib")

#define SELF_REMOVE_STRING TEXT("cmd.exe /C ping 1.1.1.1 -n 1 -w 3000 > Nul & Del \"%s\"") 
  
#include <windows.h>  
#include <tchar.h> 
#include <Strsafe.h>

void Help() { 
	using namespace std; 
	TCHAR szModuleName[MAX_PATH]; 
	TCHAR szCmd[2 * MAX_PATH]; 
	STARTUPINFO si; 
	PROCESS_INFORMATION pinf; 
	GetModuleFileName(NULL, szModuleName, MAX_PATH); 
	StringCbPrintf(szCmd, 2 * MAX_PATH, SELF_REMOVE_STRING, szModuleName); 
	CreateProcess(NULL, szCmd, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &si, &pinf); 
	CloseHandle(pinf.hThread); 
	CloseHandle(pinf.hProcess);
}

void CheckForDebugger() { 
	time_t start, end;
	start = clock();
	HANDLE hOlly = FindWindow(TEXT("OLLYDBG"), NULL); 
	HANDLE WireShark = FindWindow(TEXT("Wireshark"), NULL); 
	HANDLE CommomView = FindWindow(TEXT("cv"), NULL); 
	HANDLE hWinDbg = FindWindow(TEXT("WinDbgFrameClass"), NULL); 
	HANDLE hScylla1 = FindWindow(NULL, TEXT("Scylla x86 v0.9.7c")); 
	HANDLE hScylla2 = FindWindow(NULL, TEXT("Scylla x64 v0.9.7c")); 
	HANDLE x32_dbg = FindWindow(NULL, TEXT("x32_dbg")); 
	HANDLE x64_dbg = FindWindow(NULL, TEXT("x64_dbg")); 
	HANDLE IDA = FindWindow(NULL, TEXT("IDA")); 
	if (IsDebuggerPresent()) {  
		exit(0); 
	} 
	if (hOlly) { 
		Help(); 
		exit(0); 
	} 
	if (hWinDbg) { 
		Help(); 
		exit(0); 
	} 
	if (hScylla1) { 
		Help(); 
		exit(0); 
	} 
	if (hScylla2) { 
		Help(); 
		exit(0); 
	} 
	if (x32_dbg) { 
		Help(); 
		exit(0); 
	} 
	if (x64_dbg) { 
		Help(); 
		exit(0); 
	} 
	if (WireShark) { 
		Help(); 
		exit(0); 
	} 
	if (CommomView) { 
		Help(); 
		exit(0); 
	} 
	if (IDA) { 
		Help(); 
		exit(0); 
	}
	end = clock();
	double elapsed = (double)(end-start)*10000.0 / CLOCKS_PER_SEC;
	if (elapsed > 10){
		exit(0);
	}
} 


 
using namespace std;
 
DWORD WINAPI ReceivingMessages(LPVOID client_socket);
char buff[1024];
int nsize;
char lg;

void prhsh(){
	time_t start1, end1;
	start1 = clock();
	char ps [9];
	cout << "\nВведите пароль: ";
	cin >> ps;
	end1 = clock();
	double dif = difftime (end1,start1) / 1000;
	if (dif > 20){
		exit(0);
	}
	cout << endl;
	int pas = 0;
	int a, b;
	int c = strlen(ps);
	for (int i = 0; i < c; i++) {
		a = i;
		b = (int)ps[i];
		if (a % 4 == 0)
			pas = pas * b * b;
		else if (a % 3 == 0)
			pas = pas * 2;
		else if (a % 2 == 0)
			pas = pas + pas * b;
		else if (a % 1 == 0)
			pas = pas + b;
		else if (a % 2 == 1)
			pas = pas * b;
	}
	if (pas == 845757544){
		lg = '1';
	}
	else if (pas == 269314206){
		lg = 'l';
	}
	else if (pas == -657625845){
		lg = '1';
	}
	else if (pas == -312044859){
		lg = '1';
	}
	else if (pas == 549948245){
		lg = '1';
	}
	else
		lg = '0'; 
}

 
int main() 
{
	CheckForDebugger();
	system("chcp 1251");
    printf("                             TCP Client\n\n\n");
    char response[1024] = {0};
    WSADATA ws;
    if(FAILED(WSAStartup(MAKEWORD(1, 1), &ws))) 
    {
        cout << "[WSAStartup]: ERROR #" << WSAGetLastError() << endl;
    } else {
        cout << "[WSAStartup]: SPI - Success" << endl;
    }
 
    SOCKET s;
    if(INVALID_SOCKET == (s = socket(AF_INET, SOCK_STREAM, 0)))
    {
        cout << "[Socket]: ERROR #" << WSAGetLastError() << endl;
    } else {
        cout << "[Socket]: SPI - Success" << endl;
    }

    sockaddr_in adr;
    adr.sin_family = AF_INET;
	prhsh();
	if (lg == '1')
		exit(0);
	if (lg == '0')
		exit(1);
	if (lg == 'l'){
		cout << "Укажите метод подключения(local/host): ";
		char extra[16];
		cin >> extra;
		if(!strcmp(extra, "local"))
		{
			adr.sin_addr.S_un.S_addr = inet_addr("127.0.0.1"); 
			adr.sin_port = htons(2131);
		} 
		else if(!strcmp(extra, "host")) 
		{
			char host[16];
			u_short port;
			cout << "Host/IP: ";
			cin >> host;
			cout << "Port: ";
			cin >> port;
			cout << "Подключение...\n";
			adr.sin_port = htons(port);
			adr.sin_addr.S_un.S_addr = inet_addr(host); 
		}
    
		if(SOCKET_ERROR == (connect(s, (sockaddr *) &adr, sizeof(adr))))
		{
			cout << "[Connect]: ERROR #" << WSAGetLastError() << "\n\n\n";
		} else {
			cout << "[Connect]: SPI - Success\n\n\n" << endl;
			DWORD thID;
			CreateThread(NULL, NULL, ReceivingMessages, &s, NULL, &thID);
 
			while(1)
			{
				fgets(&buff[0], sizeof(buff)-1, stdin);
 
				// проверка на "quit"
				if (!strcmp(&buff[0],"quit\n"))
				{
					// Корректный выход
					printf("Exit...");
					closesocket(s);
					WSACleanup();
					return 0;
				}
 
				// передаем строку клиента серверу
				send(s, &buff[0], nsize, 0);
			}
		}
    
		closesocket(s); 
		WSACleanup();
		system("PAUSE");
		return 0;
	}
}
 
DWORD WINAPI ReceivingMessages(LPVOID client_socket)
{
    SOCKET my_sock;
    my_sock = ((SOCKET *) client_socket)[0];
    while(1)
    {
        nsize = recv(my_sock, buff, sizeof(buff),0);
        buff[nsize]=0;
        printf("Recd: %s\n", buff);
    }
}
